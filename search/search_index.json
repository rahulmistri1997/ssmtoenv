{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":""},{"location":"#ssm-parameter-to-env-file-utility","title":"SSM Parameter to .env File Utility","text":"<p><code>ssmtoenv</code> is a command-line utility that allows you to fetch AWS Systems Manager (SSM) parameters and add them to a <code>.env</code> file. This tool is designed to simplify the process of retrieving and managing sensitive configuration parameters from AWS SSM Parameter Store and making them available for your applications in a local environment.</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>ssmtoenv --aws-access-key &lt;AWS_ACCESS_KEY&gt; --aws-secret-key &lt;AWS_SECRET_KEY&gt; [--session-token &lt;SESSION_TOKEN&gt;] [--prefix &lt;PREFIX&gt;] [--install-completion &lt;SHELL&gt;] [--show-completion &lt;SHELL&gt;] [--help]\n</code></pre>"},{"location":"#options","title":"Options","text":"<ul> <li><code>--aws-access-key TEXT</code>: AWS Access Key (required).</li> <li><code>--aws-secret-key TEXT</code>: AWS Secret Key (required).</li> <li><code>--session-token TEXT</code>: AWS Session Token (optional, defaults to \"None\").</li> <li><code>--prefix TEXT</code>: SSM Parameter Store prefix (optional, defaults to \"/cloudflaretunnel/\").</li> <li><code>--install-completion [bash|zsh|fish|powershell|pwsh]</code>: Install completion for the specified shell.</li> <li><code>--show-completion [bash|zsh|fish|powershell|pwsh]</code>: Show completion for the specified shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"#how-it-works","title":"How It Works","text":"<p><code>ssmtoenv</code> interacts with AWS Systems Manager Parameter Store to retrieve configuration parameters based on the provided options. It then generates or updates a <code>.env</code> file with the retrieved parameters, making them available for your application to consume.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>ssmtoenv</code> using <code>pip</code>, the Python package manager:</p> <pre><code>pip install ssmtoenv\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>Suppose you have AWS SSM parameters with the prefix <code>/myapp/</code> containing database credentials, and you want to add them to a <code>.env</code> file for your application to use. You can use the following command:</p> <pre><code>ssmtoenv --aws-access-key &lt;YOUR_AWS_ACCESS_KEY&gt; --aws-secret-key &lt;YOUR_AWS_SECRET_KEY&gt; --prefix /myapp/\n</code></pre> <p>This command will fetch all parameters under the <code>/myapp/</code> prefix and update your <code>.env</code> file with the retrieved values.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you encounter any issues or have suggestions for improvements, feel free to open an issue or submit a pull request on the GitHub repository.</p> <p>Note: This README provides a brief overview of the <code>ssmtoenv</code> utility. For more detailed information, options, and usage examples, please refer to the command-line help (<code>ssmtoenv --help</code>) or the source code documentation.</p>"},{"location":"ssmtoenv_doc/library/","title":"Library","text":"<p>Library Code</p> <p>Fetch SSM parameters and add them to a .env file.</p>"},{"location":"ssmtoenv_doc/library/#ssmtoenv.main.TyperOptionFetch","title":"<code>TyperOptionFetch</code>","text":"Source code in <code>ssmtoenv/main.py</code> <pre><code>class TyperOptionFetch:\n@staticmethod\ndef aws_access_key() -&gt; typer.Option:\n\"\"\"\n        The function `aws_access_key()` returns the AWS Access Key.\n        :return: The function `aws_access_key()` is returning a `typer.Option` object.\n        \"\"\"\nreturn typer.Option(\n...,\nprompt=True,\nhide_input=True,\nconfirmation_prompt=False,\nhelp=\"AWS Access Key\",\n)\n@staticmethod\ndef aws_secret_key() -&gt; typer.Option:\n\"\"\"\n        The function `aws_secret_key()` prompts the user to enter their AWS Secret Key and hides the\n        input for security purposes.\n        \"\"\"\nreturn typer.Option(\n...,\nprompt=True,\nhide_input=True,\nconfirmation_prompt=False,\nhelp=\"AWS Secret Key\",\n)\n@staticmethod\ndef session_token() -&gt; typer.Option:\n\"\"\"\n        The function `session_token()` returns an AWS Session Token, with a default value of \"None\" if\n        not provided.\n        :return: a `typer.Option` object.\n        \"\"\"\nreturn typer.Option(\n\"None\",\nprompt=True,\nhide_input=True,\nconfirmation_prompt=False,\nhelp=\"AWS Session Token, if not provided will default to None\",\n)\n@staticmethod\ndef prefix() -&gt; typer.Option:\n\"\"\"\n        The `prefix` function returns a `typer.Option` object with default values and prompts for user\n        input.\n        :return: a `typer.Option` object.\n        \"\"\"\nreturn typer.Option(\n\"/cloudflaretunnel/\",\nprompt=True,\nconfirmation_prompt=False,\nhelp=\"SSM Parameter Store prefix\",\n)\n</code></pre>"},{"location":"ssmtoenv_doc/library/#ssmtoenv.main.TyperOptionFetch.aws_access_key","title":"<code>aws_access_key()</code>  <code>staticmethod</code>","text":"<p>The function <code>aws_access_key()</code> returns the AWS Access Key. :return: The function <code>aws_access_key()</code> is returning a <code>typer.Option</code> object.</p> Source code in <code>ssmtoenv/main.py</code> <pre><code>@staticmethod\ndef aws_access_key() -&gt; typer.Option:\n\"\"\"\n    The function `aws_access_key()` returns the AWS Access Key.\n    :return: The function `aws_access_key()` is returning a `typer.Option` object.\n    \"\"\"\nreturn typer.Option(\n...,\nprompt=True,\nhide_input=True,\nconfirmation_prompt=False,\nhelp=\"AWS Access Key\",\n)\n</code></pre>"},{"location":"ssmtoenv_doc/library/#ssmtoenv.main.TyperOptionFetch.aws_secret_key","title":"<code>aws_secret_key()</code>  <code>staticmethod</code>","text":"<p>The function <code>aws_secret_key()</code> prompts the user to enter their AWS Secret Key and hides the input for security purposes.</p> Source code in <code>ssmtoenv/main.py</code> <pre><code>@staticmethod\ndef aws_secret_key() -&gt; typer.Option:\n\"\"\"\n    The function `aws_secret_key()` prompts the user to enter their AWS Secret Key and hides the\n    input for security purposes.\n    \"\"\"\nreturn typer.Option(\n...,\nprompt=True,\nhide_input=True,\nconfirmation_prompt=False,\nhelp=\"AWS Secret Key\",\n)\n</code></pre>"},{"location":"ssmtoenv_doc/library/#ssmtoenv.main.TyperOptionFetch.prefix","title":"<code>prefix()</code>  <code>staticmethod</code>","text":"<p>The <code>prefix</code> function returns a <code>typer.Option</code> object with default values and prompts for user input. :return: a <code>typer.Option</code> object.</p> Source code in <code>ssmtoenv/main.py</code> <pre><code>@staticmethod\ndef prefix() -&gt; typer.Option:\n\"\"\"\n    The `prefix` function returns a `typer.Option` object with default values and prompts for user\n    input.\n    :return: a `typer.Option` object.\n    \"\"\"\nreturn typer.Option(\n\"/cloudflaretunnel/\",\nprompt=True,\nconfirmation_prompt=False,\nhelp=\"SSM Parameter Store prefix\",\n)\n</code></pre>"},{"location":"ssmtoenv_doc/library/#ssmtoenv.main.TyperOptionFetch.session_token","title":"<code>session_token()</code>  <code>staticmethod</code>","text":"<p>The function <code>session_token()</code> returns an AWS Session Token, with a default value of \"None\" if not provided. :return: a <code>typer.Option</code> object.</p> Source code in <code>ssmtoenv/main.py</code> <pre><code>@staticmethod\ndef session_token() -&gt; typer.Option:\n\"\"\"\n    The function `session_token()` returns an AWS Session Token, with a default value of \"None\" if\n    not provided.\n    :return: a `typer.Option` object.\n    \"\"\"\nreturn typer.Option(\n\"None\",\nprompt=True,\nhide_input=True,\nconfirmation_prompt=False,\nhelp=\"AWS Session Token, if not provided will default to None\",\n)\n</code></pre>"},{"location":"ssmtoenv_doc/library/#ssmtoenv.main.fetch_and_add_to_env","title":"<code>fetch_and_add_to_env(aws_access_key=TyperOptionFetch.aws_access_key(), aws_secret_key=TyperOptionFetch.aws_secret_key(), session_token=TyperOptionFetch.session_token(), prefix=TyperOptionFetch.prefix())</code>","text":"<p>Fetch SSM parameters and add them to a .env file.</p> <p>Parameters:</p> Name Type Description Default <code>aws_access_key</code> <code>str</code> <p>AWS Access Key.</p> <code>TyperOptionFetch.aws_access_key()</code> <code>aws_secret_key</code> <code>str</code> <p>AWS Secret Key.</p> <code>TyperOptionFetch.aws_secret_key()</code> <code>session_token</code> <code>str</code> <p>AWS Session Token. Defaults to \"None\".</p> <code>TyperOptionFetch.session_token()</code> <code>prefix</code> <code>str</code> <p>SSM Parameter Store prefix.</p> <code>TyperOptionFetch.prefix()</code> Source code in <code>ssmtoenv/main.py</code> <pre><code>@app.command()\ndef fetch_and_add_to_env(\naws_access_key: str = TyperOptionFetch.aws_access_key(),\naws_secret_key: str = TyperOptionFetch.aws_secret_key(),\nsession_token: Optional[str] = TyperOptionFetch.session_token(),\nprefix: str = TyperOptionFetch.prefix(),\n) -&gt; None:\n\"\"\"\n    Fetch SSM parameters and add them to a .env file.\n    Args:\n        aws_access_key (str): AWS Access Key.\n        aws_secret_key (str): AWS Secret Key.\n        session_token (str, optional): AWS Session Token. Defaults to \"None\".\n        prefix (str): SSM Parameter Store prefix.\n    \"\"\"\ntyper.echo(f\"Fetching SSM parameters with prefix: {prefix}\")\nparameters = fetch_ssm_parameters(\nprefix, aws_access_key, aws_secret_key, session_token\n)\nif len(parameters) == 0:\ntyper.echo(\"No parameters found with the given prefix\")\nraise typer.Exit(code=1)\ndotenv_path = find_dotenv(usecwd=True)\nif dotenv_path == \"\":\ndotenv_path = \".env\"\nwith open(dotenv_path, \"w\") as f:\nf.write(\"\")\ndotenv_path = find_dotenv(usecwd=True)\nfor parameter in parameters:\nparameter_name = parameter[\"Name\"].split(\"/\")[-1]\nparameter_value = parameter[\"Value\"]\nset_key(dotenv_path, parameter_name, parameter_value)\ntyper.echo(f\"Added parameter: {parameter_name}\")\n</code></pre>"},{"location":"ssmtoenv_doc/library/#ssmtoenv.main.fetch_ssm_parameters","title":"<code>fetch_ssm_parameters(prefix, aws_access_key, aws_secret_key, session_token)</code>","text":"<p>Fetch SSM parameters from AWS Parameter Store.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>SSM Parameter Store prefix.</p> required <code>aws_access_key</code> <code>str</code> <p>AWS Access Key.</p> required <code>aws_secret_key</code> <code>str</code> <p>AWS Secret Key.</p> required <code>session_token</code> <code>str</code> <p>AWS Session Token.</p> required <p>Returns:</p> Name Type Description <code>ssm_secrets</code> <code>list</code> <p>List of SSM parameter dictionaries.</p> Source code in <code>ssmtoenv/main.py</code> <pre><code>def fetch_ssm_parameters(prefix, aws_access_key, aws_secret_key, session_token) -&gt; list:\n\"\"\"\n    Fetch SSM parameters from AWS Parameter Store.\n    Args:\n        prefix (str): SSM Parameter Store prefix.\n        aws_access_key (str): AWS Access Key.\n        aws_secret_key (str): AWS Secret Key.\n        session_token (str): AWS Session Token.\n    Returns:\n        ssm_secrets (list): List of SSM parameter dictionaries.\n    \"\"\"\nif session_token == \"None\":\nsession_token = None\nsession = boto3.Session(\naws_access_key_id=aws_access_key,\naws_secret_access_key=aws_secret_key,\naws_session_token=session_token,\n)\nssm_client = session.client(\"ssm\")\ntry:\nparameters = []\nnext_token: Literal[\"\"] = \"\"\nwhile True:\nresponse = ssm_client.get_parameters_by_path(\nPath=prefix, Recursive=True, WithDecryption=True, NextToken=next_token\n)\nparameters.extend(response.get(\"Parameters\", []))\nnext_token = response.get(\"NextToken\")\nif not next_token:\nbreak\nreturn parameters\nexcept NoCredentialsError:\ntyper.echo(\n\"AWS credentials not found. Make sure you have configured your credentials.\"\n)\nraise typer.Exit(code=1)\n</code></pre>"},{"location":"tests_doc/tests/","title":"Tests","text":"<p>Library Tests</p>"},{"location":"tests_doc/tests/#tests.test_main.mock_ssm_parameters","title":"<code>mock_ssm_parameters()</code>","text":"<p>Mocked SSM parameters.</p> <p>Returns:</p> Type Description <code>list[dict[str, str]]</code> <p>list[dict[str, str]]: List of mocked SSM parameters.</p> Source code in <code>tests/test_main.py</code> <pre><code>@pytest.fixture\ndef mock_ssm_parameters() -&gt; list[dict[str, str]]:\n\"\"\"Mocked SSM parameters.\n    Returns:\n        list[dict[str, str]]: List of mocked SSM parameters.\n    \"\"\"\nreturn [\n{\"Name\": \"/cloudflaretunnel/param1\", \"Value\": \"value1\"},\n{\"Name\": \"/cloudflaretunnel/param2\", \"Value\": \"value2\"},\n]\n</code></pre>"},{"location":"tests_doc/tests/#tests.test_main.test_fetch_and_add_to_env","title":"<code>test_fetch_and_add_to_env(mock_typer, mock_fetch_ssm_parameters, mock_find_dotenv, mock_set_key, mock_ssm_parameters)</code>","text":"<p>Test fetch_and_add_to_env function.</p> <p>Parameters:</p> Name Type Description Default <code>mock_typer</code> <code>MagicMock</code> <p>Mocked typer module.</p> required <code>mock_fetch_ssm_parameters</code> <code>MagicMock</code> <p>Mocked fetch_ssm_parameters function.</p> required <code>mock_find_dotenv</code> <code>MagicMock</code> <p>Mocked find_dotenv function.</p> required <code>mock_set_key</code> <code>MagicMock</code> <p>Mocked set_key function.</p> required <code>mock_ssm_parameters</code> <code>list</code> <p>List of mocked SSM parameters.</p> required Source code in <code>tests/test_main.py</code> <pre><code>@patch(\"ssmtoenv.main.set_key\")\n@patch(\"ssmtoenv.main.find_dotenv\", return_value=\".env\")\n@patch(\"ssmtoenv.main.fetch_ssm_parameters\")\n@patch(\"ssmtoenv.main.typer\")\ndef test_fetch_and_add_to_env(\nmock_typer,\nmock_fetch_ssm_parameters,\nmock_find_dotenv,\nmock_set_key,\nmock_ssm_parameters,\n) -&gt; None:\n\"\"\"Test fetch_and_add_to_env function.\n    Args:\n        mock_typer (MagicMock): Mocked typer module.\n        mock_fetch_ssm_parameters (MagicMock): Mocked fetch_ssm_parameters function.\n        mock_find_dotenv (MagicMock): Mocked find_dotenv function.\n        mock_set_key (MagicMock): Mocked set_key function.\n        mock_ssm_parameters (list): List of mocked SSM parameters.\n    \"\"\"\nmock_typer.echo.side_effect = lambda x: print(x)\nmock_find_dotenv.return_value = \".env\"\nmock_fetch_ssm_parameters.return_value = mock_ssm_parameters\nfetch_and_add_to_env(\n\"access_key\", \"secret_key\", \"session_token\", \"/cloudflaretunnel/\"\n)\nexpected_calls = [\n\"Fetching SSM parameters with prefix: /cloudflaretunnel/\",\n\"Added parameter: param1\",\n\"Added parameter: param2\",\n]\n# Make all expected calls to mock_typer.echo\nexpected_calls: list[tuple[tuple[str]]] = [((call,),) for call in expected_calls]\nassert mock_typer.echo.call_args_list == expected_calls\n</code></pre>"}]}